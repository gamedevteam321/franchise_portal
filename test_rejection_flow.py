#!/usr/bin/env python3
"""
Test script for franchise portal rejection and reapplication functionality.
This script tests the new features:
1. Email uniqueness validation allowing rejected applications
2. Enhanced rejection notification emails
3. New application creation after rejection
"""

import frappe
import json
from frappe.utils import now

def test_rejection_and_reapplication_flow():
    """Test the complete rejection and reapplication flow"""
    
    print("üß™ Testing Franchise Portal Rejection & Reapplication Flow")
    print("=" * 60)
    
    test_email = "test.rejection@example.com"
    test_company_1 = "Test Company Alpha"
    test_company_2 = "Test Company Beta"
    
    try:
        # Clean up any existing test data
        cleanup_test_data(test_email)
        
        # Step 1: Create initial application
        print("\n1Ô∏è‚É£ Creating initial application...")
        app1 = create_test_application(test_email, test_company_1)
        print(f"   ‚úÖ Created application: {app1.name}")
        
        # Step 2: Submit the application
        print("\n2Ô∏è‚É£ Submitting application...")
        app1.status = "Submitted"
        app1.save()
        print(f"   ‚úÖ Application submitted: {app1.name}")
        
        # Step 3: Reject the application
        print("\n3Ô∏è‚É£ Rejecting application...")
        rejection_reason = "Insufficient financial documentation provided"
        result = app1.reject_application(rejection_reason)
        print(f"   ‚úÖ Application rejected with reason: {rejection_reason}")
        
        # Step 4: Test email uniqueness validation - should allow new application now
        print("\n4Ô∏è‚É£ Testing email uniqueness validation...")
        try:
            app2 = create_test_application(test_email, test_company_2)
            print(f"   ‚úÖ New application allowed after rejection: {app2.name}")
        except Exception as e:
            print(f"   ‚ùå Error creating new application: {str(e)}")
            return False
        
        # Step 5: Test reapplication eligibility API
        print("\n5Ô∏è‚É£ Testing reapplication eligibility API...")
        from franchise_portal.www.signup.api import check_reapplication_eligibility
        eligibility = check_reapplication_eligibility(test_email)
        
        if eligibility.get("success") and eligibility.get("can_reapply"):
            print(f"   ‚úÖ API correctly identifies user can reapply")
            print(f"   üìã Previous applications found: {len(eligibility.get('previous_applications', []))}")
        else:
            print(f"   ‚ùå API error: {eligibility.get('message')}")
            return False
        
        # Step 6: Test new application creation API
        print("\n6Ô∏è‚É£ Testing new application creation API...")
        from franchise_portal.www.signup.api import start_new_application_after_rejection
        
        test_data = {
            "company_name": "Test Company Gamma",
            "contact_person": "Test Contact",
            "phone_number": "1234567890"
        }
        
        new_app_result = start_new_application_after_rejection(test_email, test_data)
        
        if new_app_result.get("success"):
            print(f"   ‚úÖ New application process started successfully")
            print(f"   üîó Verification token: {new_app_result.get('verification_token')[:20]}...")
        else:
            print(f"   ‚ùå New application start failed: {new_app_result.get('message')}")
            return False
        
        # Step 7: Verify the applications exist in the system
        print("\n7Ô∏è‚É£ Verifying applications in system...")
        applications = frappe.get_all(
            "Franchise Signup Application",
            filters={"email": test_email},
            fields=["name", "status", "company_name", "creation"],
            order_by="creation asc"
        )
        
        print(f"   üìä Total applications found: {len(applications)}")
        for i, app in enumerate(applications, 1):
            print(f"   {i}. {app.name} - {app.company_name} - Status: {app.status}")
        
        # Step 8: Test that active applications prevent new ones
        print("\n8Ô∏è‚É£ Testing active application prevention...")
        app2.status = "Submitted"
        app2.save()
        
        eligibility_with_active = check_reapplication_eligibility(test_email)
        
        if not eligibility_with_active.get("can_reapply"):
            print(f"   ‚úÖ API correctly prevents reapplication with active application")
        else:
            print(f"   ‚ùå API should prevent reapplication but allowed it")
            return False
        
        print("\nüéâ All tests passed successfully!")
        print("\nFeatures verified:")
        print("  ‚úÖ Email uniqueness validation allows rejected applications")
        print("  ‚úÖ Rejection notification system works")
        print("  ‚úÖ Reapplication eligibility checking")
        print("  ‚úÖ New application creation after rejection")
        print("  ‚úÖ Prevention of multiple active applications")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Test failed with error: {str(e)}")
        frappe.log_error(f"Rejection flow test error: {str(e)}", "Test Error")
        return False
        
    finally:
        # Clean up test data
        print("\nüßπ Cleaning up test data...")
        cleanup_test_data(test_email)


def create_test_application(email, company_name):
    """Create a test application"""
    app = frappe.get_doc({
        "doctype": "Franchise Signup Application",
        "email": email,
        "company_name": company_name,
        "contact_person": "Test Contact Person",
        "phone_number": "1234567890",
        "company_address": "123 Test Street, Test City",
        "country_of_operation": "India",
        "project_name": f"Test Project for {company_name}",
        "project_type": "Franchise",
        "project_city": "Test City",
        "project_state": "Test State",
        "email_verified": 1,
        "email_verified_at": now(),
        "status": "Draft"
    })
    
    app.insert(ignore_permissions=True)
    frappe.db.commit()
    return app


def cleanup_test_data(email):
    """Clean up any existing test data"""
    try:
        applications = frappe.get_all(
            "Franchise Signup Application",
            filters={"email": email},
            fields=["name"]
        )
        
        for app in applications:
            frappe.delete_doc("Franchise Signup Application", app.name, ignore_permissions=True)
        
        frappe.db.commit()
        
        if applications:
            print(f"   üßπ Cleaned up {len(applications)} existing test applications")
            
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Cleanup warning: {str(e)}")


if __name__ == "__main__":
    # This script should be run from the Frappe bench directory
    # Example: python apps/franchise_portal/test_rejection_flow.py
    test_rejection_and_reapplication_flow() 